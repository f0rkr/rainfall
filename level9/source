void __thiscall N::N(N *this,int param_1)

{
  *(undefined ***)this = &PTR_operator+_08048848;
  *(int *)(this + 0x68) = param_1;
  return;
}


void __thiscall N::setAnnotation(N *this,char *param_1)

{
  size_t __n;

  __n = strlen(param_1);
  memcpy(this + 4,param_1,__n);
  return;
}

int __thiscall N::operator+(N *this,N *param_1)

{
  return *(int *)(param_1 + 0x68) + *(int *)(this + 0x68);
}


/* N::TEMPNAMEPLACEHOLDERVALUE(N&) */

int __thiscall N::operator-(N *this,N *param_1)

{
  return *(int *)(this + 0x68) - *(int *)(param_1 + 0x68);
}


void main(int argc,char **argv)

{
  N *this;
  undefined4 *this_00;

  if (argc < 2) {
                    /* WARNING: Subroutine does not return */
    _exit(1);
  }
  this = (N *)operator.new(0x6c);
  N::N(this,5);
  this_00 = (undefined4 *)operator.new(0x6c);
  N::N((N *)this_00,6);
  N::setAnnotation(this,argv[1]);
  (**(code **)*this_00)(this_00,this);
  return;
}